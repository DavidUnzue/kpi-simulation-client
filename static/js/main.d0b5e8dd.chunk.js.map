{"version":3,"sources":["components/Bins/index.tsx","components/Form/index.tsx","config.ts","components/Map/PopupInfo/index.tsx","assets/images/location.svg","components/Map/Markers/index.tsx","components/Map/index.tsx","components/Points/PointList/index.tsx","components/Points/index.tsx","services/api.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Bins","bins","Object","keys","length","className","map","key","index","Form","state","inputValue","handleChange","ev","setState","target","value","handleSubmit","props","onSubmit","this","htmlFor","id","min","max","type","onChange","onClick","React","Component","process","PopupInfo","number","Math","round","info","onClose","latitude","lat","longitude","long","closeButton","closeOnClick","anchor","category","text","roundNumber","_extends","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","d","_ref","svgRef","title","viewBox","ref","ForwardRef","forwardRef","Markers","data","color","point","geometry","coordinates","properties","name","popupInfo","offsetLeft","offsetTop","width","height","fill","PureComponent","Map","mapContainer","createRef","viewport","zoom","openPopup","changePopup","closePopup","pointsByCategory","mapStyle","onViewportChange","mapboxApiAccessToken","config","pointCategory","categoryName","points","PointList","Points","isEmpty","forEach","pointsCategory","api","urlRoot","defaultOptions","redirect","path","params","options","url","urlParams","URLSearchParams","toString","fetch","response","ok","Error","json","App","triggerSimulation","requestsNumber","a","get","number_of_requests","console","log","getGeoFeatures","jsonString","JSON","parse","features","e","booking_distance_bins","most_popular_dropoff_points","most_popular_pickup_points","categoryId","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d0b5e8dd.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Bins = ({ bins }: { bins: any }) =>\n  Object.keys(bins).length > 0 ? (\n    <div className=\"Bins\">\n      <details>\n        <summary>Booking distance bins</summary>\n        <p>\n          How many bookings happened for every \"kilometer bin\". E.g. how many\n          bookings had a distance between 0 and 1km, 1 and 2kms, etc.\n        </p>\n        <div className=\"BinsList\">\n          {Object.keys(bins).map((key, index) => (\n            <div key={index} className=\"BinItem\">\n              {key}: {bins[key]}\n            </div>\n          ))}\n        </div>\n      </details>\n    </div>\n  ) : null;\n","import React from \"react\";\n\ninterface FormProps {\n  onSubmit: Function;\n}\n\ninterface FormState {\n  inputValue: string;\n}\n\nexport class Form extends React.Component<FormProps, FormState> {\n  state = {\n    inputValue: \"10\",\n  };\n\n  handleChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      inputValue: ev.target.value,\n    });\n  };\n\n  handleSubmit = () => {\n    this.props.onSubmit(this.state.inputValue);\n  };\n\n  render() {\n    const { inputValue } = this.state;\n\n    return (\n      <form className=\"Form\">\n        <label className=\"FormLabel\" htmlFor=\"requestsNumber\">\n          Number of requests (max. 10)\n        </label>\n        <input\n          id=\"requestsNumber\"\n          className=\"FormInput\"\n          value={inputValue}\n          min=\"1\"\n          max=\"10\"\n          type=\"number\"\n          onChange={this.handleChange}\n        />\n        <button\n          className=\"FormButton\"\n          type=\"button\"\n          onClick={this.handleSubmit}\n        >\n          Run simulation\n        </button>\n      </form>\n    );\n  }\n}\n","export default {\n  apiRoot: process.env.REACT_APP_API_ROOT,\n  mapboxApiToken: process.env.REACT_APP_MAPBOX_API_TOKEN,\n};\n","import React from \"react\";\nimport { Popup } from \"react-map-gl\";\n\nexport class PopupInfo extends React.Component<{\n  info: {\n    category: string;\n    lat: number;\n    long: number;\n    text: string;\n  } | null;\n  onClose: () => void;\n}> {\n  roundNumber(number: number) {\n    return Math.round(number * 100) / 100;\n  }\n\n  render() {\n    const { info, onClose } = this.props;\n    return (\n      info && (\n        <Popup\n          latitude={info.lat}\n          longitude={info.long}\n          closeButton={true}\n          closeOnClick={false}\n          onClose={onClose}\n          anchor=\"top\"\n          className=\"popup\"\n        >\n          <p>\n            <i>{info.category}</i>\n            <br />\n            <strong>{info.text}</strong>\n          </p>\n          <p>\n            Latitude: {this.roundNumber(info.lat)}\n            <br />\n            Longitude: {this.roundNumber(info.long)}\n          </p>\n        </Popup>\n      )\n    );\n  }\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M10 20S3 10.87 3 7a7 7 0 1 1 14 0c0 3.87-7 13-7 13zm0-11a2 2 0 1 0 0-4 2 2 0 0 0 0 4z\"\n});\n\nvar SvgLocation = function SvgLocation(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 20 20\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgLocation, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/location.c93ff43d.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport { Marker } from \"react-map-gl\";\nimport { ReactComponent as Location } from \"../../../assets/images/location.svg\";\n\nexport class Markers extends React.PureComponent<{\n  category: string;\n  data: any;\n  onClick: Function;\n  color: string;\n}> {\n  render() {\n    const { category, data, color, onClick } = this.props;\n\n    return data.map((point: any) => {\n      const [long, lat] = point.geometry?.coordinates;\n      const { name, id }: { name: string; id: string } = point.properties;\n      const popupInfo = {\n        category,\n        lat,\n        long,\n        text: name,\n      };\n\n      return (\n        <Marker\n          key={id}\n          latitude={lat}\n          longitude={long}\n          offsetLeft={-12}\n          offsetTop={-24}\n        >\n          <Location\n            width={24}\n            height={24}\n            title={name}\n            onClick={() => onClick(popupInfo)}\n            className=\"markerIcon\"\n            fill={color}\n          />\n        </Marker>\n      );\n    });\n  }\n}\n","import React from \"react\";\nimport ReactMapGL from \"react-map-gl\";\nimport config from \"../../config\";\nimport { PopupInfo } from \"./PopupInfo\";\nimport { Markers } from \"./Markers\";\n\ninterface MapProps {\n  pointsByCategory: Array<{\n    categoryId: string;\n    categoryName: string;\n    points: [];\n    color: string;\n  }>;\n  changePopup: Function;\n  popupInfo: any;\n}\n\ninterface MapState {\n  viewport: {\n    latitude: number;\n    longitude: number;\n    zoom: number;\n  };\n}\n\nexport class Map extends React.Component<MapProps, MapState> {\n  private mapContainer: any = React.createRef();\n\n  state = {\n    viewport: {\n      latitude: 52.5300463,\n      longitude: 13.4007813,\n      zoom: 10,\n    },\n  };\n\n  openPopup = (popupInfo: any) => {\n    this.props.changePopup(popupInfo);\n  };\n\n  closePopup = () => {\n    this.props.changePopup(null);\n  };\n\n  render() {\n    const { viewport } = this.state;\n    const { pointsByCategory, popupInfo } = this.props;\n\n    return (\n      <div className=\"mapContainer\">\n        <ReactMapGL\n          ref={this.mapContainer}\n          {...viewport}\n          className=\"map\"\n          mapStyle=\"mapbox://styles/mapbox/streets-v9\"\n          width=\"100%\"\n          height=\"100%\"\n          onViewportChange={(viewport: any) => this.setState({ viewport })}\n          mapboxApiAccessToken={config.mapboxApiToken}\n          onClick={this.closePopup}\n        >\n          <PopupInfo info={popupInfo} onClose={this.closePopup} />\n          {pointsByCategory.map((pointCategory, index) => {\n            const { categoryName, points, color } = pointCategory;\n            return (\n              <Markers\n                key={index}\n                category={categoryName}\n                data={points}\n                onClick={this.openPopup}\n                color={color}\n              />\n            );\n          })}\n        </ReactMapGL>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport const PointList = ({\n  category,\n  points,\n  onClick,\n}: {\n  category: string;\n  points: [];\n  onClick: Function;\n}) => (\n  <div className=\"PointList\">\n    {points.map((point: any) => {\n      const [long, lat] = point.geometry?.coordinates;\n      const { name, id }: { name: string; id: string } = point.properties;\n      const popupInfo = {\n        category,\n        lat,\n        long,\n        text: name,\n      };\n      return (\n        <div key={id} className=\"PointItem\" onClick={() => onClick(popupInfo)}>\n          {point.properties?.name}\n        </div>\n      );\n    })}\n  </div>\n);\n","import React from \"react\";\nimport { PointList } from \"./PointList\";\nimport { Tab, Tabs, TabList, TabPanel } from \"react-tabs\";\n\nexport const Points = ({\n  pointsByCategory,\n  changePopup,\n}: {\n  pointsByCategory: Array<{\n    categoryId: string;\n    categoryName: string;\n    points: [];\n    color: string;\n  }>;\n  changePopup: Function;\n}) => {\n  let isEmpty = true;\n  pointsByCategory.forEach((pointsCategory) => {\n    isEmpty = pointsCategory.points.length <= 0;\n  });\n\n  return !isEmpty ? (\n    <div className=\"Points\">\n      <Tabs className=\"Tabs\">\n        <TabList className=\"TabList\">\n          <span className=\"PointsTitle\">Points</span>\n          {pointsByCategory.map((pointCategory, index) => (\n            <Tab key={index} className=\"Tab\">\n              {pointCategory.categoryName}\n            </Tab>\n          ))}\n        </TabList>\n\n        {pointsByCategory.map((pointCategory, index) => (\n          <TabPanel key={index} className=\"TabPanel\">\n            <PointList\n              category={pointCategory.categoryName}\n              points={pointCategory.points}\n              onClick={changePopup}\n            />\n          </TabPanel>\n        ))}\n      </Tabs>\n    </div>\n  ) : null;\n};\n","import config from \"../config\";\n\nclass Api {\n  private urlRoot: string;\n  private defaultOptions: {};\n\n  constructor() {\n    this.urlRoot = `${config.apiRoot}`;\n    this.defaultOptions = {\n      redirect: \"follow\",\n    };\n  }\n\n  async get(path: string = \"\", params: {} = {}, options?: RequestInit) {\n    let url = `${this.urlRoot}${path}`;\n    // serialize params to a query string\n    if (Object.keys(params).length > 0) {\n      const urlParams = new URLSearchParams(params);\n      url = `${url}?${urlParams.toString()}`;\n    }\n\n    try {\n      // this could be easily replaced by something like axios\n      const response = await fetch(url, {\n        ...this.defaultOptions,\n        ...options,\n      });\n      if (!response.ok) {\n        throw new Error(\"Bad request\");\n      }\n      return response.json();\n    } catch (e) {\n      throw new Error(e);\n    }\n  }\n}\n\nconst api = new Api();\nexport default api;\n","import React from \"react\";\nimport \"./assets/css/App.css\";\nimport { Bins } from \"./components/Bins\";\nimport { Form } from \"./components/Form\";\nimport { Map } from \"./components/Map\";\nimport { Points } from \"./components/Points\";\nimport api from \"./services/api\";\n\ninterface AppState {\n  data: any;\n  popupInfo: any;\n}\n\nclass App extends React.Component {\n  state: AppState = {\n    data: {},\n    popupInfo: null,\n  };\n\n  triggerSimulation = async (requestsNumber: number) => {\n    try {\n      const data = await api.get(\"kpis\", {\n        number_of_requests: requestsNumber,\n      });\n      this.setState({\n        data,\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  getGeoFeatures = (jsonString: string) => {\n    try {\n      const parsedJson = JSON.parse(jsonString);\n      return parsedJson.features || [];\n    } catch (e) {\n      console.log(e);\n      return [];\n    }\n  };\n\n  changePopup = (popupInfo: any) => {\n    this.setState({\n      popupInfo,\n    });\n  };\n\n  render() {\n    const { data, popupInfo } = this.state;\n    const {\n      booking_distance_bins = {},\n      most_popular_dropoff_points = \"{}\",\n      most_popular_pickup_points = \"{}\",\n    } = data;\n\n    const pointsByCategory = [\n      {\n        categoryId: \"pickup\",\n        categoryName: \"Pick up\",\n        points: this.getGeoFeatures(most_popular_pickup_points),\n        color: \"#085156\",\n      },\n      {\n        categoryId: \"dropoff\",\n        categoryName: \"Drop off\",\n        points: this.getGeoFeatures(most_popular_dropoff_points),\n        color: \"#26c4b8\",\n      },\n    ];\n\n    return (\n      <div className=\"App\">\n        <div className=\"AppSidebar\">\n          <h1 className=\"AppHeader\">KPI Simulator</h1>\n          <Form onSubmit={this.triggerSimulation} />\n          <Bins bins={booking_distance_bins} />\n          <Points\n            pointsByCategory={pointsByCategory}\n            changePopup={this.changePopup}\n          />\n        </div>\n        <Map\n          pointsByCategory={pointsByCategory}\n          popupInfo={popupInfo}\n          changePopup={this.changePopup}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}